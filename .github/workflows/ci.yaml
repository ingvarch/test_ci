name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Dockerfile to use'
        required: true
        default: 'Dockerfile'
      image_repo:
        description: 'ECR image repository name'
        required: true
        default: '510061785511.dkr.ecr.eu-north-1.amazonaws.com/hurma'
      architectures:
        description: 'Target architectures (comma-separated without spaces)'
        required: true
        default: 'amd64'

jobs:
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install black
        run: pip install black

      - name: Run black linter
        run: black --check .

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install pytest
          pip install -r requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest tests/

  prepare:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      matrix_config: ${{ steps.set_matrix.outputs.matrix_json }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set default inputs if not workflow_dispatch
        run: |
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "Setting default values for architectures and image_repo"
            echo "architectures=amd64" >> $GITHUB_ENV
            echo "image_repo=510061785511.dkr.ecr.eu-north-1.amazonaws.com/hurma" >> $GITHUB_ENV
          fi

      - name: Generate matrix JSON
        id: set_matrix
        run: |
          input_archs="${{ env.architectures || github.event.inputs.architectures }}"
          json_output=$(echo "$input_archs" | jq -R 'split(",") | map({arch: ., platform: ("linux/" + .)}) | {include: .}')
          echo "Generated JSON: $json_output"
          echo "matrix_json=$(echo "$json_output" | jq -c)" >> $GITHUB_OUTPUT

  build_and_push:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix_config) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.event.inputs.image_repo }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ github.event.inputs.dockerfile }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
